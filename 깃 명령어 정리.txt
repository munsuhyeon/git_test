https://github.com/munsuhyeon/git_test.git

git init - 업로드할 파일이 있는 작업폴더를 등록한다
git add 파일이름 - 업로드 할 파일을 선택한다
git add . - 작업 폴더 내 모든 파일을 한번에 선택한다
git status - 로컬 작업 폴더의 상태 확인
git commit -m "메모" - 선택한 파일을 업로드 전 단계로 소환
<git 유저정보 등록>
git cofnig --global user.email 계정 이메일
git config --global user.name 사용자 이름
git log 
git log --all --oneline - 깃 로그 기록 한줄로 보기
git push 전 깃 허브는 master이니까 main으로 브랜치 바꿔주기
git branch -m 변경전브랜치이름 변경후브랜치
git branch -M main - 내 온라인 저장소에 메인 폴더 등록(저장소 만들고 최초 1회)
git branch -m master main - 브런치 master에서 main으로 변경
git push 원격저장소 주소 main -> 푸쉬완료

git commit --amend --author="유저이름<유저이메일>" - 커밋 계정 정보를 변경한다
git difftool 이전커밋헤쉬코드  다음커밋헤쉬코드

vscode git 관련 확장팩 사용팁 소개
git extenstion 가서 git graph 검색 후 설치
설치 후 git작업폴더 가서 외쪽 사이드 세번째 메뉴를 선택한다

깃 머지 충돌 오류 상황
1. 복사본브랜치에서 코드 수정 후 커밋
2. 메인브랜치에서 코드 수정 후 커밋
3. 메인 브랜치에서 코드 머지 요청(git merge 복사본브랜치) -> 충돌
4. 두 브랜치에서 겹치는 코드를 수정하여 최종적으로 남길 코드만 남긴다
5. git add -> git commit -> git push

<3-way merge>
만약 메인 저장폴더에 변경사항이 없고 복사본에만 변경사항이 있다면 fast-forward merge라고 한다
이렇게 개발하다보면 복사폴더들이 사용도 안하는데 남아있게 되는데 삭제해주는 것이 좋다
git branch -d 복사할 브랜치이름
만약 머지안한 복사폴더를 없애고 싶으면 git branch -D 복사폴더이름
장점 : 모든 커밋 히스토리가 보존된다
단점 : 커밋하는 사람과 복사본이 많아지면 기록 추적이 어려워진다

<fast-forward merge>
메인브랜치에 신규 커밋이 없고 하위 브랜치에만 커밋들이 존재하면 fast-forward merge가 자동으로 발동된다
장점 : 커밋 히스토리 관리가 더 쉬워진다
단점 : 정확한 히스토리의 완전한 추적은 어렵다

<rebase>
복사본 브랜치를 원본으로 지정해서 히스토리 관리를 간단하게 만드는데 이런 유형을 rebase병합이라 한다
rebase로 합치게 되면 브랜치 지점을 최근 커밋으로 옮겨서 병합
단점 : conflict가 많아진다

<merge>할 때 순서
1. git switch main - 메인 브랜치로 변경
2. git merge 복사브랜치이름 - 두 브랜치를 합친다
3. 코드 변경사항을 최종 결정하고 git add & git commit
4. push로 내 계정에 올리면 끝

<rebase>할 때 순서
1. git switch 복사브랜치 - 복사브랜치로 변경
2. git rebase main - 복사본을 중심으로 main저장소를 합쳐버린다
3. 코드변경사항을 최종 결정하고 커밋한다
4. push로 내 계정에 올리면 끝

<squash>
git merge --squash 새브랜치
중간 연결과정을 없애고 핵심만 가져온다
squash는 여러개의 커밋을 하나의 커밋으로 합치는 것을 의미한다
Squash Merge는 병합할 브랜치의 모든 커밋을 하나의 커밋으로 squash한 새로운 커밋을 
Base브랜치에 추가하는 방식으로 병합하는 것을 의미한다

push할 때 작업 히스토리를 맞춰야 하는데 pull 명령어를 이용해서 인터넷의 작업 내역과 내 작업폴더의 내용을 합친다
2. git pull 내깃헙주소
3. git clone
작업 환경 바뀌었을 때 온라인 저장소에서 현재까지 내역 전부 가져오기

force push - 강제병합
이전 인터넷 저장 히스토리를 무시하고 현재 내 작업폴더 내용을 억지로 업로드
git push 깃헙주소 main
force push의 문제점
저장소의 이름과 과거 히스토리를 전부 무시하고 덮어 씌우므로 저장 브랜치 이름을 혼동하거나 버전을 주의깊게 체크하지 않으면 문제가 생긴다.

정해진 멤버만 정해진 저장소에 들어가서 작업 하는 법
1. 저장소를 만들 때 private으로 설정하고 collaborator 옵션으로 팀장이 방을 만들고 팀원들이 collaborator로 들어가면 
초대된 팀원과 팀장만이 저장소 내용을 바꿀 수 있다

git reset  e8205b829fc85cfed6a92b17832aa8f5394d83ec(커밋헤드)

git reset HEAD^ 직전 커밋으로 돌아가기

git remote add origin 커밋주소
origin이라는 변수에 내 깃헙 주소를 저장한 것이다
그러면 git push origin -u main 이렇게만 입력해도 작동이 된다





1. 작업 폴더 등록
git init

2. 업로드할 파일 선택
git add 올릴파일이름(확장자까지 다 써주세요)
git add .

3. 업로드 대상 파일 등록(커밋하다)
git commit –m “최최최종 3/21” 

4. 사용자 계정등록 (누구 이름으로 내 저장소에 파일올리나)
git config --global user.email "홍길동@naver.com"
git config --global user.name "홍길동"

5. 중간 결과확인
내 로컬 작업 기준으로 파일등록 상태확인
git status 
나의 업로드(커밋) 히스토리 확인
git log
git log --all --oneline
git log --all --oneline --graph

6. 과거 파일과 변경 내역을 비교
git log --all --oneline 하고나면 7자리 id가 보이는데
비교하고싶은 버전의 7자리id를 저장 후 아래처럼 입력한다
git difftool 7자리id 7자리id
예) git difftool d602703 874e565

7. 내 온라인 저장소에 메인 폴더 등록
(저장소 만들고 최초 1회만)
git branch -M main

8. git push 내 깃헙주소 main

9..git branch 브랜치 명 - 복사본이 만들어진다
만들어진 복사본으로 이동하려면 
git switch 브랜치명
내가 어디에 있는지 중간에 확인하고 싶으면 git status 입력하면 어느 브랜치에 있는지 정보가 나온다

10. 복사본과 메일을 합치는 방법은 merge와 rebase 크게 두가지가 자주 쓰이는 편이다
merge는 메인폴더를 중심으로 branch를 합치는 방법이고(3-way)
git switch main으로 메인 브랜치로 이동 후
git merge 복사 브랜치이름 이렇게 합친다
rebase는 브랜치 폴더를 중심으로 main을 합치는 방법이다
git switch 복사브랜치
git rebase main 이렇게 하면 복사본을 중심으로 파일이 합쳐진다

11. 복사 브랜치와 메인을 합치는 과정에서 당연히 코드 충돌이 생길 수 있다. 같은 영역에 두 코드가 존재하는 등 conflict상황이 발생한다.
이 경우 conflict나는 영역에서 내가 최종으로 가져갈 코드를 남기고 저장 후 결정된 코드를 담아서
git add .
git commit -m "병합완료"
이런 식으로 코드병합 후 새롭게 커밋하여 push하면 된다.

12. 업로드 할 때
git push 내 깃헙주소 복사본 이름
위 처럼하면 깃헙 계정에 복사폴더(브랜치)가 생성되며 업로드 되는데 나의 의도가 main에 업로드 하는건지 branch에 업로드 하는 건지 신중히 확인하여 업로드하자
사용 완료한 (합치고 난) 브랜치는 git branch -d 복사브랜치 이름
위 처럼 입력하여 복사본들을 중간에 삭제하여 청소해 주자
만들기만 하고 합치지 않은 복사브랜치 제거법은
git branch -D 복사 브랜치 이름(로컬브랜치 강제로 삭제)
git push <원격 저장소 이름> -d <원격 브랜치 이름> -> 원격 브랜치 삭제하기

13. 내 깃헙 주소를 변수에 담아 두번 입력 안하는 법
git remote add origin 저장소 주소
이렇게 입력하면 origin이라는 변수에 내 깃헙 주소를 저장한 것이다
git push origin -u main 이렇게만 입력해도 작동이 된다
-u의 뜻은 방금 친 주소를 기억해라
git push 이렇게만 입력해도 작업이 되니 참고하자

14. 컴퓨터 환경이 바뀌었을 때 내 깃헙에서 과거 모든 히스토리를 포함한 작업 파일을 가져오는 법은
git clone 내 계정주소

15. 우리팀 지정 멤버만 저장소를 열람하고 편집작업을 허락 하려면 
repository를 private으로 정해주고 collaborator에 팀원을 초대하여 등록된 사람만 작업할 수 있도록 하면된다

16. 내 깃헙 계정에 내 로컬 작업환경과 다른 파일이 올라가거나 
누군가 업로드 해버리면 깃헙상 작업 히스토리와 내 로컬환경 작업 히스토리가 매치하지 않게된다.
이러면 push를 통한 업로드가 불가능해 지는데, pull명령어로 변경된 히스토리를 내 컴퓨터에 내려받아 히스토리를 일치 시킨 후 push작업이 가능하다
git pull 내 계정주소
이렇게 하면 작업 히스토리가 내려받아진다

17. git pull로 작업내역을 내려 받아도 git push가 작동하지 않는 경우가 생긴다. 크게 두가지 해결방법이 있다
1) git clone으로 다른 폴더에 작업을 내려받아 거기서부터 코딩 후 push하는 법
	=>저장소 히스토리부터 코딩을 다시 해야한다
2) force push를 사용한 강제병함
    git push -f 깃헙주소 main
	=> 과거 히스토리를 전부 무시하고 덮어 씌우는 방식이므로 저장소 이름이나 코딩 진행과정이 틀리면 완전히 잘못되는 경우가 생기므로 정말 신중히 해야한다.
	     간혹 내가 작업 내역을 커밋하지 않아 히스토리가 안맞을 수 있으므로 중간에 커밋도 한번하면서 히스토리 내역이 안맞는 상황을 피하자

18. git log 내부 hash주소를 가지고 원하는 코드 버전으로 회귀가능
git reset 7da28116f38aed3990fa0f6968c80fc60d267c44
위 처럼 해쉬값을 주면 된다
바로 직전 버전으로 회귀
git reset HEAD



